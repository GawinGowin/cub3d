#include <gtest/gtest.h>

extern "C"
{
#include "cub3d.h"
}

struct MapTestData
{
	const char *map[50];
	int expected; // 期待される結果
};

// テストデータの作成
class MapValidationTest : public ::testing::TestWithParam<MapTestData>
{
};

TEST_P(MapValidationTest, Map)
{
	auto param = GetParam();
	EXPECT_EQ(is_valid_map((char **)param.map), param.expected);
}

// 有効なマップ
INSTANTIATE_TEST_SUITE_P(
	ValidMaps,
	MapValidationTest,
	::testing::Values(
		MapTestData{{"11111111",
					 "10000001",
					 "10000001",
					 "1N000001",
					 "10000001",
					 "10000001",
					 "11111111", NULL},
					1},
		MapTestData{{"        ",
					 " 111111 ",
					 " 100001 ",
					 " 100001 ",
					 " 10S001 ",
					 " 111111 ",
					 "        ", NULL},
					1},
		MapTestData{{"11111111",
					 "10000001",
					 "100E0001",
					 "10000111",
					 "100001  ",
					 "111111  ", NULL},
					1},
		MapTestData{{"  111111",
					 "  100W01",
					 "11100001",
					 "10000001",
					 "10000111",
					 "100001  ",
					 "111111  ", NULL},
					1},
		MapTestData{{"11111111",
					 "10000001",
					 "11111101",
					 "1000N001",
					 "10111111",
					 "10000001",
					 "11111111", NULL},
					1},
		MapTestData{{"11111111",
					 "11111111",
					 "11111111",
					 "111S1111",
					 "11111111",
					 "11111111",
					 "11111111", NULL},
					1},
		MapTestData{{"11111111",
					 "10000001",
					 "10111101",
					 "101  101",
					 "10111101",
					 "1000E001",
					 "11111111", NULL},
					1},
		MapTestData{{
					"        1111111111111111111111111",
					"        1000000000110000000000001",
					"        1011000001110000000000001",
					"        1001000000000000000000001",
					"111111111011000001110000000000001",
					"100000000011000001110111111111111",
					"11110111111111011100000010001    ",
					"11110111111111011101010010001    ",
					"11000000110101011100000010001    ",
					"1000000000000000110000N010001    ",
					"10000000000000001101010010001    ",
					"1100000111010101111101111000111  ",
					"11110111 1110101 101111010001    ",
					"11111111 1111111 111111111111    ",
					NULL}, 1}
	)
);

INSTANTIATE_TEST_SUITE_P(
	InvalidMaps_Unsurrounded,
	MapValidationTest,
	::testing::Values(
		MapTestData{{"11111111",
					 "10000001",
					 "10000001",
					 "1N00000 ",
					 "10000001",
					 "11111111", NULL},
					0},
		MapTestData{{"11111111",
					 "10000001",
					 "10000001",
					 "1S000000",
					 "10000001",
					 "11111111", NULL},
					0},
		MapTestData{{"00000000",
					 "00000000",
					 "00000000",
					 "0E000000",
					 "00000000",
					 "00000000", NULL},
					0},
		MapTestData{{"01111110",
					 "11111111",
					 "11111111",
					 "11111111",
					 "11111111",
					 "W1111110", NULL},
					0},
		MapTestData{{"        ",
					 "    N   ",
					 "        ",
					 NULL},
					0},
		MapTestData{{"11111111",
					 "10000001",
					 "10111101",
					 "1N0  101",
					 "10111101",
					 "10000001",
					 "11111111", NULL},
					0},
		MapTestData{{NULL},	0}
	)
);

INSTANTIATE_TEST_SUITE_P(
	InvalidMaps_NoStartSymbols,
	MapValidationTest,
	::testing::Values(
		MapTestData{{"11111111",
					 "10000001",
					 "10000001",
					 "10000001",
					 "10000001",
					 "10000001",
					 "11111111", NULL},
					0},
		MapTestData{{"        ",
					 " 111111 ",
					 " 100001 ",
					 " 100001 ",
					 " 100001 ",
					 " 111111 ",
					 "        ", NULL},
					0},
		MapTestData{{"11111111",
					 "10000001",
					 "10000001",
					 "10000111",
					 "100001  ",
					 "111111  ", NULL},
					0},
		MapTestData{{"  111111",
					 "  100001",
					 "11100001",
					 "10000001",
					 "10000111",
					 "100001  ",
					 "111111  ", NULL},
					0},
		MapTestData{{"11111111",
					 "10000001",
					 "11111101",
					 "10000001",
					 "10111111",
					 "10000001",
					 "11111111", NULL},
					0},
		MapTestData{{"11111111",
					 "10000001",
					 "10111101",
					 "101  101",
					 "10111101",
					 "10000001",
					 "11111111", NULL},
					0},
		MapTestData{{"1111111111",
					 "1111111111",
					 "1111111111",
					 NULL},
					0},
		MapTestData{{"1111111111",
					 NULL},
					0},
		MapTestData{{"1",
					 "1",
					 "1",
					 "1",
					 "1",
					 "1",
					 NULL},
					0},
		MapTestData{{"11111111",
					 "11111111",
					 "11111111",
					 "11101111",
					 "11111111",
					 "11111111",
					 "11111111", NULL},
					0}
	)
);

INSTANTIATE_TEST_SUITE_P(
	InvalidMaps_InvaildSymbols,
	MapValidationTest,
	::testing::Values(
		// 有効な文字以外
		MapTestData{{"11111111",
					 "10000001",
					 "10000001",
					 "10000001",
					 "10000001",
					 "10A00001",
					 "11111111", NULL},
					0},
		MapTestData{{"11111111",
					 "10N00001",
					 "10000001",
					 "10000001",
					 "10000001",
					 "10A00001",
					 "11111111", NULL},
					0},
		// 重複(同じもの2つ)
		MapTestData{{"11111111",
					 "1NN00001",
					 "10000001",
					 "10000001",
					 "10000001",
					 "10000001",
					 "11111111", NULL},
					0},
		// 重複(同じもの3つ以上)
		MapTestData{{"        ",
					 " 111111 ",
					 " 1EEEE1 ",
					 " 100001 ",
					 " 100001 ",
					 " 111111 ",
					 "        ", NULL},
					0},
		// 重複(異なるもの2つ)
		MapTestData{{"11111111",
					 "1NS00001",
					 "10000001",
					 "10000111",
					 "100001  ",
					 "111111  ", NULL},
					0},
		// 重複(異なるもの3つ以上)
		MapTestData{{"11111111",
					 "1NSEW001",
					 "10000001",
					 "10000001",
					 "10000001",
					 "10000001",
					 "11111111", NULL},
					0}
	)
);